<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0">
<channel>
        <title>Atwood blog</title>
        <description>Atwood blog - Wang Atwood</description>
        <link>http://atwoodunix.github.io</link>
        <link>http://atwoodunix.github.io</link>
        <lastBuildDate>2013-12-07T19:29:28+00:00</lastBuildDate>
        <pubDate>2013-12-07T19:29:28+00:00</pubDate>
        <ttl>1800</ttl>


        <item>
                <title>Vim</title>
                <description>&lt;pre&gt;&lt;code&gt;:split或new 打开一个新窗口，光标停在顶层的窗口上

:split file或:new file 用新窗口打开文件

split打开的窗口都是横向的，使用vsplit可以纵向打开窗口。

Ctrl+ww 移动到下一个窗口

Ctrl+wj 移动到下方的窗口

Ctrl+wk 移动到上方的窗口
Ctrl - Z 挂起vim，回到shell，按fg可以返回vim
ZZ 保存并退出。
正常模式下按v（逐字）或V（逐行）进入可视模式，然后用jklh命令移动即可选择某些行或字符，再按d即可剪切

ndd 剪切当前行之后的n行。利用p命令可以对剪切的内容进行粘贴

:1,10d 将1-10行剪切。利用p命令可将剪切后的内容进行粘贴。

:1, 10 m 20 将第1-10行移动到第20行之后。

yy 拷贝当前行

nyy 拷贝当前后开始的n行，比如2yy拷贝当前行及其下一行。

p  在当前光标后粘贴,如果之前使用了yy命令来复制一行，那么就在当前行的下一行粘贴。

shift+p 在当前行前粘贴

:1,10 co 20 将1-10行插入到第20行之后。

:1,$ co $ 将整个文件复制一份并添加到文件尾部。

正常模式下按v（逐字）或V（逐行）进入可视模式，然后用jklh命令移动即可选择某些行或字符，再按y即可复制

ddp交换当前行和其下一行

xp交换当前字符和其后一个字符
x 删除当前字符

3x 删除当前光标开始向后三个字符

X 删除当前字符的前一个字符。X=dh

dl 删除当前字符， dl=x

dh 删除前一个字符

dd 删除当前行

dj 删除上一行

dk 删除下一行

10d 删除当前行开始的10行。

D 删除当前字符至行尾。D=d$

d$ 删除当前字符之后的所有字符（本行）

kdgg 删除当前行之前所有行（不包括当前行）

jdG（jd shift + g）   删除当前行之后所有行（不包括当前行）

:1,10d 删除1-10行

:11,$d 删除11行及以后所有的行

:1,$d 删除所有行

J(shift + j)　　删除两行之间的空行，实际上是合并两行。


h 左移一个字符
l 右移一个字符，这个命令很少用，一般用w代替。
k 上移一个字符
j 下移一个字符
以上四个命令可以配合数字使用，比如20j就是向下移动20行，5h就是向左移动5个字符，在Vim中，很多命令都可以配合数字使用，比如删除10个字符10x，在当前位置后插入3个！，3a！&amp;lt;Esc&amp;gt;，这里的Esc是必须的，否则命令不生效。

w 向前移动一个单词（光标停在单词首部），如果已到行尾，则转至下一行行首。此命令快，可以代替l命令。

b 向后移动一个单词 2b 向后移动2个单词

e，同w，只不过是光标停在单词尾部

ge，同b，光标停在单词尾部。

^ 移动到本行第一个非空白字符上。

0（数字0）移动到本行第一个字符上，

&amp;lt;HOME&amp;gt; 移动到本行第一个字符。同0健。

$ 移动到行尾 3$ 移动到下面3行的行尾

gg 移动到文件头。 = [[

G（shift + g） 移动到文件尾。 = ]]

f（find）命令也可以用于移动，fx将找到光标后第一个为x的字符，3fd将找到第三个为d的字符。

F 同f，反向查找。

跳到指定行，冒号+行号，回车，比如跳到240行就是 :240回车。另一个方法是行号+G，比如230G跳到230行。

Ctrl + e 向下滚动一行

Ctrl + y 向上滚动一行

Ctrl + d 向下滚动半屏

Ctrl + u 向上滚动半屏

Ctrl + f 向下滚动一屏

Ctrl + b 向上滚动一屏



ra 将当前字符替换为a，当期字符即光标所在字符。

s/old/new/ 用old替换new，替换当前行的第一个匹配

s/old/new/g 用old替换new，替换当前行的所有匹配

%s/old/new/ 用old替换new，替换所有行的第一个匹配

%s/old/new/g 用old替换new，替换整个文件的所有匹配

:10,20 s/^/    /g 在第10行知第20行每行前面加四个空格，用于缩进。

ddp 交换光标所在行和其下紧邻的一行。

i 在当前位置生前插入

I 在当前行首插入

a 在当前位置后插入

A 在当前行尾插入

o 在当前行之后插入一行

O 在当前行之前插入一行


打开单个文件

vim file

同时打开多个文件

vim file1 file2 file3 ...

在vim窗口中打开一个新文件

:open file

在新窗口中打开文件

:split file

切换到下一个文件

:bn

切换到上一个文件

:bp

查看当前打开的文件列表，当前正在编辑的文件会用[]括起来。

:args

打开远程文件，比如ftp或者share folder

:e ftp://192.168.10.76/abc.txt

:e \\qadrive\test\1.txt&lt;/code&gt;&lt;/pre&gt;</description>
                <link>http://atwoodunix.github.io/lessons/2013/12/07/vim</link>
                <guid>http://atwoodunix.github.io/lessons/2013/12/07/vim</guid>
                <pubDate>2013-12-07T00:00:00+00:00</pubDate>
        </item>

        <item>
                <title>tmux shortcuts</title>
                <description>&lt;h2 id='tmux_using'&gt;tmux using&lt;/h2&gt;

&lt;p&gt;tmux #开启tmux&lt;/p&gt;

&lt;p&gt;tmux ls #显示已有tmux列表（C-b s）&lt;/p&gt;

&lt;p&gt;tmux attach-session -t 数字 #选择tmux&lt;/p&gt;

&lt;p&gt;C-b c 创建一个新的窗口&lt;/p&gt;

&lt;p&gt;C-b n 切换到下一个窗口&lt;/p&gt;

&lt;p&gt;C-b p 切换到上一个窗口&lt;/p&gt;

&lt;p&gt;C-b l 最后一个窗口,和上一个窗口的概念不一样哟,谁试谁知道&lt;/p&gt;

&lt;p&gt;c-b w 通过上下键选择当前窗口中打开的会话&lt;/p&gt;

&lt;p&gt;C-b 数字 直接跳到你按的数字所在的窗口&lt;/p&gt;

&lt;p&gt;C-b &amp;amp; 退出当前窗口&lt;/p&gt;

&lt;p&gt;C-b d 临时断开会话 断开以后,还可以连上的哟:)&lt;/p&gt;

&lt;p&gt;C-b &amp;#8221; 分割出来一个窗口&lt;/p&gt;

&lt;p&gt;C-b % 分割出来一个窗口&lt;/p&gt;

&lt;p&gt;C-b (方向键)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C-b ! 关闭所有小窗口

C-b x 关闭当前光标处的小窗口

C-b t 钟表

C-b pageup/pagedo&lt;/code&gt;&lt;/pre&gt;</description>
                <link>http://atwoodunix.github.io/supporting%20tagline/2013/12/07/tmux-shortcuts</link>
                <guid>http://atwoodunix.github.io/supporting%20tagline/2013/12/07/tmux-shortcuts</guid>
                <pubDate>2013-12-07T00:00:00+00:00</pubDate>
        </item>

        <item>
                <title>Tmux Introduction</title>
                <description>&lt;h2 id='tmux_using'&gt;tmux using&lt;/h2&gt;

&lt;p&gt;tmux #开启tmux&lt;/p&gt;

&lt;p&gt;tmux ls #显示已有tmux列表（C-b s）&lt;/p&gt;

&lt;p&gt;tmux attach-session -t 数字 #选择tmux&lt;/p&gt;

&lt;p&gt;C-b c 创建一个新的窗口&lt;/p&gt;

&lt;p&gt;C-b n 切换到下一个窗口&lt;/p&gt;

&lt;p&gt;C-b p 切换到上一个窗口&lt;/p&gt;

&lt;p&gt;C-b l 最后一个窗口,和上一个窗口的概念不一样哟,谁试谁知道&lt;/p&gt;

&lt;p&gt;c-b w 通过上下键选择当前窗口中打开的会话&lt;/p&gt;

&lt;p&gt;C-b 数字 直接跳到你按的数字所在的窗口&lt;/p&gt;

&lt;p&gt;C-b &amp;amp; 退出当前窗口&lt;/p&gt;

&lt;p&gt;C-b d 临时断开会话 断开以后,还可以连上的哟:)&lt;/p&gt;

&lt;p&gt;C-b &amp;#8221; 分割出来一个窗口&lt;/p&gt;

&lt;p&gt;C-b % 分割出来一个窗口&lt;/p&gt;

&lt;p&gt;C-b (方向键)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C-b ! 关闭所有小窗口

C-b x 关闭当前光标处的小窗口

C-b t 钟表

C-b pageup/pagedo&lt;/code&gt;&lt;/pre&gt;</description>
                <link>http://atwoodunix.github.io/lessons/2013/12/07/tmux-introduction</link>
                <guid>http://atwoodunix.github.io/lessons/2013/12/07/tmux-introduction</guid>
                <pubDate>2013-12-07T00:00:00+00:00</pubDate>
        </item>

        <item>
                <title>Ssh Proxy</title>
                <description>&lt;h3 id='_https__github'&gt;利用 HTTPS 代理访问 GitHub&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;安装 corkscrew&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;ArchLinux 和 Ubuntu 的源里就有，也可以从 http://www.agroman.net/corkscrew/ 下载源码编译一个。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;修改 ~/.ssh/config&lt;/p&gt;

&lt;p&gt;Host gitproxy User git Hostname ssh.github.com Port 443 ProxyCommand corkscrew proxy.example.com 3128 %h %p IdentityFile /home/username/.ssh/id_rsa&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;修改其中的 proxy.example.com 和 3128 为代理 IP 和端口，如果代理需要帐号密码，就在 ProxyCommand 这一行的最后加上密码文件，内容为用户名:密码。&lt;/p&gt;

&lt;p&gt;参数 IdentitiFile 指定相应帐号的私钥文件地址。&lt;/p&gt;

&lt;p&gt;另外 @cyfdecyf 同学指出只要把这里的 Host 改成 github.com，就可以直接用 git@github.com:user/repository 访问 GitHub 了。&lt;/p&gt;

&lt;p&gt;更新： 由于 GitHub 现在支持 HTTPS 协议了，所以更简单的方法是使用 GitHub 提供的 HTTPS 地址，然后用 git config &amp;#8211;add http.proxy 指定 HTTPs 代理&lt;/p&gt;</description>
                <link>http://atwoodunix.github.io/lessons/2013/12/07/ssh-proxy</link>
                <guid>http://atwoodunix.github.io/lessons/2013/12/07/ssh-proxy</guid>
                <pubDate>2013-12-07T00:00:00+00:00</pubDate>
        </item>

        <item>
                <title>Jekyll0</title>
                <description>&lt;p&gt;然后，创建一个没有父节点的分支gh-pages。因为github规定，只有该分支中的页面，才会生成网页文件。&lt;/p&gt;

&lt;p&gt;　　$ git checkout &amp;#8211;orphan gh-pages&lt;/p&gt;

&lt;p&gt;以下所有动作，都在该分支下完成。&lt;/p&gt;

&lt;p&gt;第二步，创建设置文件。&lt;/p&gt;

&lt;p&gt;在项目根目录下，建立一个名为_config.yml的文本文件。它是jekyll的设置文件，我们在里面填入如下内容，其他设置都可以用默认选项，具体解释参见官方网页。&lt;/p&gt;

&lt;p&gt;　　baseurl: /jekyll_demo&lt;/p&gt;

&lt;p&gt;目录结构变成：&lt;/p&gt;

&lt;p&gt;　　/jekyll_demo&lt;/p&gt;

&lt;p&gt;　　　　|&amp;#8211;　_config.yml&lt;/p&gt;

&lt;p&gt;第三步，创建模板文件。&lt;/p&gt;

&lt;p&gt;在项目根目录下，创建一个_layouts目录，用于存放模板文件。&lt;/p&gt;

&lt;p&gt;进入该目录，创建一个default.html文件，作为Blog的默认模板。并在该文件中填入以下内容。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;　　&amp;lt;!DOCTYPE html&amp;gt;
　　&amp;lt;html&amp;gt;
　　&amp;lt;head&amp;gt;
　　　　&amp;lt;meta http-equiv=&amp;quot;content-type&amp;quot; content=&amp;quot;text/html; charset=utf-8&amp;quot; /&amp;gt;
　　　　&amp;lt;title&amp;gt;Jekyll0&amp;lt;/title&amp;gt;
　　&amp;lt;/head&amp;gt;
　　&amp;lt;body&amp;gt;

　　　　

　　&amp;lt;/body&amp;gt;
　　&amp;lt;/html&amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;第五步，创建首页。&lt;/p&gt;

&lt;p&gt;有了文章以后，还需要有一个首页。&lt;/p&gt;

&lt;p&gt;回到根目录，创建一个index.html文件，填入以下内容。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;　　---
　　layout: default
　　title: 我的Blog
　　---
　　&amp;lt;h2&amp;gt;Jekyll0&amp;lt;/h2&amp;gt;
　　&amp;lt;p&amp;gt;最新文章&amp;lt;/p&amp;gt;
　　&amp;lt;ul&amp;gt;
　　　　
　　　　　　&amp;lt;li&amp;gt;07 Dec 2013 &amp;lt;a href=&amp;quot;//lessons/2013/12/07/vim&amp;quot;&amp;gt;Vim&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
　　　　
　　　　　　&amp;lt;li&amp;gt;07 Dec 2013 &amp;lt;a href=&amp;quot;//supporting%20tagline/2013/12/07/tmux-shortcuts&amp;quot;&amp;gt;tmux shortcuts&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
　　　　
　　　　　　&amp;lt;li&amp;gt;07 Dec 2013 &amp;lt;a href=&amp;quot;//lessons/2013/12/07/tmux-introduction&amp;quot;&amp;gt;Tmux Introduction&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
　　　　
　　　　　　&amp;lt;li&amp;gt;07 Dec 2013 &amp;lt;a href=&amp;quot;//lessons/2013/12/07/ssh-proxy&amp;quot;&amp;gt;Ssh Proxy&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
　　　　
　　　　　　&amp;lt;li&amp;gt;07 Dec 2013 &amp;lt;a href=&amp;quot;//lessons/2013/12/07/jekyll0&amp;quot;&amp;gt;Jekyll0&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
　　　　
　　　　　　&amp;lt;li&amp;gt;07 Dec 2013 &amp;lt;a href=&amp;quot;//lessons/2013/12/07/jekyll&amp;quot;&amp;gt;Jekyll&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
　　　　
　　&amp;lt;/ul&amp;gt;&lt;/code&gt;&lt;/pre&gt;</description>
                <link>http://atwoodunix.github.io/lessons/2013/12/07/jekyll0</link>
                <guid>http://atwoodunix.github.io/lessons/2013/12/07/jekyll0</guid>
                <pubDate>2013-12-07T00:00:00+00:00</pubDate>
        </item>

        <item>
                <title>Jekyll</title>
                <description>&lt;h3 id='id2'&gt;一、为文章添加分类&lt;/h3&gt;

&lt;p&gt;在编辑一篇文章的时候，我们会在文章的头部写上一些 key 值, 同样的道理，我们可以为 这篇文章添加上 category 来分类。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;layout: post title: 为 Jekyll 博客添加 category 分类&lt;/p&gt;

&lt;h2 id='category_jekyll'&gt;category: Jekyll&lt;/h2&gt;

&lt;h3 id='id3'&gt;二、添加分类功能到你希望它出现的地方&lt;/h3&gt;

&lt;p&gt;在这里，你只需要把下面的代码拷贝到你的博客中，就能看到你添加的文章出现的分类了。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;h4&amp;gt;Category&amp;lt;/h4&amp;gt;
&amp;lt;ul&amp;gt;
    //这里使用了 Jekyll 语法，会被编译，所以加多个&amp;quot;\&amp;quot;
    {\% for category in site.categories %\}
    &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;/categories/{\{ category | first }\}/&amp;quot; title=&amp;quot;view all
posts&amp;quot;&amp;gt;{\{ category | first }\} {\{ category | last | size }\}&amp;lt;/a&amp;gt;
    &amp;lt;/li&amp;gt;
    {\% endfor %\}
&amp;lt;/ul&amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id='_category_'&gt;三、为博客添加 category 插件&lt;/h3&gt;

&lt;p&gt;添加 category 插件很简单，只要在根目录下建立一个 &amp;#8220;plugins&amp;#8221; 文件夹，然后拷贝category_plugin.rb 文件到里面就好了。category_plugin 文件的源代码可以在这里查看到。&lt;/p&gt;

&lt;p&gt;这个插件的作用有两点：&lt;/p&gt;

&lt;p&gt;建立 categories 文件夹, 遍历所有文章的分类，再根据分类建立分类的文件夹。 为每个分类建立一个 index.html 文件, 该文件的模板来自 layouts 里面的 category_index.html，因此您需要在 layouts 里面添加符合自己博客主题的文件。 四、添加 category_index.html 模板&lt;/p&gt;

&lt;p&gt;这个模板是为了将我们的分类主页显示出来，显示的内容是一个分类的所有文章。也就是分 类列表的链接地址。具体使用到的代码如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{\% for post in site.categories.[page.category] %\}
    {\{ post.date }\} {\{ post.title }\}
{\% endfor %\}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;创建一篇日志&lt;/p&gt;

&lt;p&gt;发布日志前,先在配置文件_config.yml中设置URL格式&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$permalink: /:year/:month/:title.html&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;其他格式参考: https://github.com/mojombo/jekyll/wiki/Permalinks&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$rake post title=&amp;quot;about this blog&amp;quot; //这个名字将会在url中呈现，所以尽量短些好
 (in d:/github/feiyuliu.github.com)
  Creating new post: ./_posts/2012-12-05-about-this-blog.md&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;到_post目录下找到刚才建立的文件，然后编辑文件。设置title,description,category,tags等，再就是用markdown来写文章了。&lt;/p&gt;

&lt;p&gt;创建一个页面&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$rake page name=&amp;quot;about.md&amp;quot;
Creating new page: ./about.md&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;创建一个嵌套的页面&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$rake page name=&amp;quot;pages/about.md&amp;quot;
Creating new page: ./pages/about.md&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;创建一个路径页面&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$rake page name=&amp;quot;pages/about&amp;quot;
Creating new page: ./pages/about/index.html&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Jekyll也提供了许多预设的页面例子,以供参考.你可以学习和按自己的需要自定义它.&lt;/p&gt;

&lt;p&gt;参考文章:&lt;/p&gt;

&lt;p&gt;我的jekyll配置和修改&lt;/p&gt;

&lt;p&gt;所有的分类都在site.categories里，所以只遍历它，就可以把分类读取出来， 其中: category | fist 为分类名称,category | last | size 为该分类下文章数量。&lt;/p&gt;

&lt;p&gt;如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{％ for category in site.categories ％}
&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;/｛｛ category | first ｝｝.html&amp;quot;&amp;gt;｛｛ category | first ｝｝(｛｛ category | last | size ｝｝)&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
{％ endfor ％}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;读取各分类下的文章列表&lt;/p&gt;

&lt;p&gt;首先，在根目录下建分类文件，如，有一个分类叫:mac，那就可以在根目录下建一个mac.html文件，这个文件头除了layout，再加一个name，和分类名称一样，如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;layout: default
name: mac&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;有这个这个name，后面就可以用page.name来调用它，为什么要调用它，后面再讲。&lt;/p&gt;

&lt;p&gt;为了照顾多个分类，所以我们再建一个包含文件，取名叫: category.html， 自然这个文件是放在_includes目录下的。category.html内容：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;分类：｛｛ page.name ｝｝
文章数：｛｛ site.categories[page.name] | size ｝｝
列表：
｛％ for post in site.categories[page.name] ％｝
//和读取post一样
｛％ endfor ％｝&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可以看出，site.categories就是利用page.name来读取对应分类下的文章的。 相关文章和此类似，目的就是读取同一分类下的文章，也是利用site.categories来获取， 只是不需要用page.name，因为文章里有分类的设置，直接用page.category就可以了。&lt;/p&gt;</description>
                <link>http://atwoodunix.github.io/lessons/2013/12/07/jekyll</link>
                <guid>http://atwoodunix.github.io/lessons/2013/12/07/jekyll</guid>
                <pubDate>2013-12-07T00:00:00+00:00</pubDate>
        </item>


</channel>
</rss>
